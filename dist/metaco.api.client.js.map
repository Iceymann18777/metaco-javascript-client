{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","lib/MetacoClientBuilder.js","lib/MetacoClientBuilderFactory.js","lib/client/MetacoClient.js","lib/errors/ErrorHandler.js","lib/errors/MetacoErrors.js","lib/http/BrowserHttpClient.js","lib/index_browser.js","lib/utils/Extensions.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"metaco.api.client.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var MetacoClient = require(\"./client/MetacoClient\");\r\n\r\nfunction MetacoClientBuilder(HttpClient) {\r\n    this.HttpClient = HttpClient;\r\n}\r\n\r\nMetacoClientBuilder.prototype.withApiUrl = function(apiUrl) {\r\n    this.metacoApiUrl = apiUrl;\r\n    return this;\r\n};\r\n\r\nMetacoClientBuilder.prototype.withApiId = function(apiId) {\r\n    this.metacoApiId = apiId;\r\n    return this;\r\n};\r\n\r\nMetacoClientBuilder.prototype.withApiKey = function(apiKey) {\r\n    this.metacoApiKey = apiKey;\r\n    return this;\r\n};\r\n\r\nMetacoClientBuilder.prototype.withTestingMode = function(testingMode) {\r\n    this.metacoTestingMode = testingMode;\r\n    return this;\r\n};\r\n\r\nMetacoClientBuilder.prototype.makeClient = function() {\r\n    return new MetacoClient(this.HttpClient, this.metacoApiUrl, this.metacoApiId, this.metacoApiKey, this.metacoTestingMode);\r\n};\r\n\r\nmodule.exports = MetacoClientBuilder;","var MetacoClientBuilder = require(\"./MetacoClientBuilder\");\r\n\r\nfunction MetacoClientBuilderFactory() {}\r\n\r\nMetacoClientBuilderFactory.prototype.makeClientBuilderWithHttpClient = function(httpClient) {\r\n    return new MetacoClientBuilder(httpClient);\r\n};\r\n\r\nmodule.exports = MetacoClientBuilderFactory;","var extensions = require(\"../utils/Extensions\");\r\n\r\nfunction MetacoClient(HttpClient, metacoApiUrl, metacoApiId, metacoApiKey, metacoTestingMode) {\r\n    this.metacoApiId = metacoApiId;\r\n    this.metacoApiKey = metacoApiKey;\r\n    this.metacoApiUrl = metacoApiUrl;\r\n    this.metacoTestingMode = metacoTestingMode;\r\n\r\n    this.httpClient = new HttpClient(this.metacoApiUrl, this.metacoApiId, this.metacoApiKey, this.metacoTestingMode);\r\n}\r\n\r\nMetacoClient.prototype.registerAccount = function(request, callback) {\r\n\r\n};\r\nMetacoClient.prototype.getAccountStatus = function(callback) {\r\n\r\n};\r\nMetacoClient.prototype.confirmPhoneNumber = function(request, callback) {\r\n\r\n};\r\n\r\nMetacoClient.prototype.getAssets = function(callback) {\r\n    this.httpClient.doGet(\"assets\", callback);\r\n};\r\n\r\nMetacoClient.prototype.getAsset = function(ticker, callback) {\r\n    this.httpClient.doGet(extensions.formatString(\"assets/{0}\", ticker), callback);\r\n};\r\n\r\nMetacoClient.prototype.getAssetsHistory = function(from, to, freq, asc, tickers, callback) {\r\n    var tickerStr = \"\";\r\n    if (tickers == null) {\r\n        tickerStr = \"all\";\r\n    } else if (typeof(tickers) !== \"string\") {\r\n        for (var i = 0; i < tickers.length; i++) {\r\n            tickerStr += tickers[i];\r\n            if (i < tickers.length - 1) {\r\n                tickerStr += \",\";\r\n            }\r\n        }\r\n    } else {\r\n        tickerStr = tickers;\r\n    }\r\n\r\n    var url = extensions.formatString(\"assets/history?underlyings={0}&from={1}&to={2}&freq={3}&orderAsc={4}\", tickerStr, from, to, freq, asc);\r\n\r\n    this.httpClient.doGet(url, callback);\r\n\r\n};\r\nMetacoClient.prototype.getAssetHistory = function(from, to, freq, asc, tickers, callback) {\r\n    this.getAssetsHistory(from, to, freq, asc, tickers, callback);\r\n};\r\nMetacoClient.prototype.createOrder = function(createOrder, callback) {\r\n\r\n};\r\nMetacoClient.prototype.getOrders = function(callback) {\r\n\r\n};\r\nMetacoClient.prototype.getOrder = function(id, callback) {\r\n\r\n};\r\nMetacoClient.prototype.submitSignedOrder = function(id, rawTransaction, callback) {\r\n\r\n};\r\nMetacoClient.prototype.cancelOrder = function(id, callback) {\r\n\r\n};\r\nMetacoClient.prototype.createTransaction = function(newTransaction, callback) {\r\n\r\n};\r\nMetacoClient.prototype.broadcastTransaction = function(rawTransaction, callback) {\r\n\r\n};\r\nMetacoClient.prototype.getWalletDetails = function(address, callback) {\r\n\r\n};\r\nMetacoClient.prototype.getLatestDebugData = function(callback) {\r\n\r\n};\r\n\r\nmodule.exports = MetacoClient;","var MetacoErrors = require (\"./MetacoErrors\");\r\n\r\nvar ErrorHandler = {};\r\n\r\nvar httpOkRegex = /^2[0-9]{2}/;\r\nvar httpServerErrorRegex = /^2[0-9]{2}/;\r\n\r\nfunction hasError(httpCode, jsonContent) {\r\n    return !httpOkRegex.test(httpCode.toString());\r\n}\r\n\r\nfunction makeError(statusCode, content, originalError, errorType) {\r\n    return {\r\n        statusCode: statusCode,\r\n        content: content,\r\n        originalError: originalError,\r\n        errorType: errorType\r\n    }\r\n}\r\n\r\nErrorHandler.handleError = function (httpCode, textContent) {\r\n\r\n    var jsonContent = null;\r\n    var metacoErrorType = null;\r\n\r\n    try {\r\n        jsonContent = JSON.parse(textContent);\r\n    } catch (e) {\r\n        jsonContent = null;\r\n    }\r\n\r\n    if (!hasError(httpCode, jsonContent)) {\r\n        return null;\r\n    }\r\n\r\n    if (MetacoErrors.values.hasOwnProperty(jsonContent.metaco_error)) {\r\n        metacoErrorType = MetacoErrors.keys[MetacoErrors.values[jsonContent.metaco_error]];\r\n    } else {\r\n        if (httpCode == 404) {\r\n            type = MetacoErrors.keys.NOT_FOUND;\r\n        } else if (httpCode == 401) {\r\n            type = MetacoErrors.keys.UNAUTHORIZED;\r\n        } else if (!httpServerErrorRegex.test(httpCode.toString())) {\r\n            type = MetacoErrors.keys.SERVER_ERROR;\r\n        } else {\r\n            type = MetacoErrors.keys.UNKNOWN_ERROR;\r\n        }\r\n    }\r\n\r\n    return makeError(httpCode, textContent, jsonContent, metacoErrorType);\r\n};\r\n\r\nmodule.exports = ErrorHandler;","var keys = {\r\n\r\n    INVALID_INPUT: \"invalid_input\",\r\n    API_CALLS_QUOTA_EXCEEDED: \"api_calls_quota_exceeded\",\r\n    SMS_SENDING_FAILED: \"sms_sending_failed\",\r\n    PHONE_CONFIRMATION_NOT_FOUND: \"phone_confirmation_not_found\",\r\n    INVALID_CONFIRMATION_CODE: \"invalid_confirmation_code\",\r\n    ORDER_NOT_FOUND: \"order_not_found\",\r\n    NOT_ENOUGH_FUNDS: \"not_enough_funds\",\r\n    ORDER_TOO_SMALL: \"order_too_small\",\r\n    ORDER_COUNT_LIMIT_EXCEEDED: \"order_count_limit_exceeded\",\r\n    YEARLY_TRANSACTION_QUOTA_EXCEEDED: \"yearly_transaction_quota_exceeded\",\r\n    MAXIMUM_TRANSACTION_AMOUNT_EXCEEDED: \"maximum_transaction_amount_exceeded\",\r\n    ORDER_NOT_CANCELLABLE: \"order_not_cancellable\",\r\n    UNAUTHORIZED: \"unauthorized\",\r\n    NOT_FOUND: \"notfound\",\r\n    SERVER_ERROR: \"servererror\",\r\n    UNKNOWN_ERROR: \"unknownerror\"\r\n};\r\n\r\nfunction reverseKeys(original) {\r\n    var values = {};\r\n\r\n    for (var key in keys) {\r\n        if (keys.hasOwnProperty(key)) {\r\n            values[original[key]] = key;\r\n        }\r\n    }\r\n\r\n    return values;\r\n}\r\n\r\nvar values = reverseKeys(keys);\r\n\r\nmodule.exports = {\r\n    keys: keys,\r\n    values: values\r\n};","var ErrorHandler = require(\"../errors/ErrorHandler\");\r\n\r\nfunction BrowserHttpClient(metacoApiUrl, metacoApiId, metacoApiKey, metacoTestingMode) {\r\n    this.metacoApiId = metacoApiId;\r\n    this.metacoApiKey = metacoApiKey;\r\n    this.metacoApiUrl = metacoApiUrl;\r\n    this.metacoTestingMode = metacoTestingMode;\r\n\r\n    this.getAbsoluteUri = function (relativeUri) {\r\n        return this.metacoApiUrl + relativeUri;\r\n    };\r\n\r\n    this.getHeaders = function () {\r\n        var headers = [];\r\n\r\n        headers.push({name: \"X-Requested-With\", value: \"XMLHttpRequest\"});\r\n        headers.push({name: \"Content-type\", value: \"application/json\"});\r\n\r\n        if (this.metacoApiId && this.metacoApiId !== \"\" &&\r\n            this.metacoApiKey && this.metacoApiKey !== \"\") {\r\n            headers.push({name: \"X-Metaco-Id\", value: this.metacoApiId});\r\n            headers.push({name: \"X-Metaco-Key\", value: this.metacoApiKey});\r\n        }\r\n\r\n        if (this.metacoTestingMode) {\r\n            headers.push({name: \"X-Metaco-Debug\", value: true});\r\n        }\r\n\r\n        return headers;\r\n    };\r\n\r\n    this.doAjaxRequest = function (type, relativeUrl, callback, dataObject) {\r\n        try {\r\n\r\n            var headers = this.getHeaders();\r\n            var absoluteUrl = this.getAbsoluteUri(relativeUrl);\r\n            var jsonData = JSON.stringify(dataObject);\r\n\r\n            var x = new(window.XMLHttpRequest || ActiveXObject)('MSXML2.XMLHTTP.3.0');\r\n\r\n            x.open(type, absoluteUrl, 1);\r\n\r\n            for(var header in headers) {\r\n                if (headers.hasOwnProperty(header)) {\r\n                    x.setRequestHeader(header.name, header.value);\r\n                }\r\n            }\r\n\r\n            x.onreadystatechange = function () {\r\n                if (x.readyState > 3) {\r\n                    var text = x.responseText;\r\n\r\n                    var error = ErrorHandler.handleError(x.status, text);\r\n\r\n                    if (error) {\r\n                        callback(error, null);\r\n                    } else {\r\n                        callback(error, JSON.parse(text));\r\n                    }\r\n                }\r\n            };\r\n\r\n            x.send(jsonData)\r\n\r\n        } catch (e) {\r\n            var error = ErrorHandler.handleError(null, e.toString());\r\n            callback(error, null);\r\n        }\r\n    }\r\n}\r\n\r\nBrowserHttpClient.prototype.doGet = function (relativeUrl, callback) {\r\n    return this.doAjaxRequest(\"GET\", relativeUrl, callback, null);\r\n};\r\n\r\nBrowserHttpClient.prototype.doPost = function (relativeUrl, dataObject, callback) {\r\n    return this.doAjaxRequest(\"POST\", relativeUrl, callback, dataObject);\r\n};\r\n\r\nBrowserHttpClient.prototype.doDelete = function (relativeUrl, callback) {\r\n    return this.doAjaxRequest(\"DELETE\", relativeUrl, callback, null);\r\n};\r\n\r\nmodule.exports = BrowserHttpClient;","var MetacoClientBuilderFactory = require (\"./MetacoClientBuilderFactory\");\r\nvar HttpClient = require(\"./http/BrowserHttpClient\");\r\nvar MetacoErrors = require(\"./errors/MetacoErrors\");\r\n\r\n\r\nfunction GetClientBuilder() {\r\n    return new MetacoClientBuilderFactory().makeClientBuilderWithHttpClient(HttpClient);\r\n}\r\n\r\n(function (__window__) {\r\n    __window__.metaco = __window__.metaco || {};\r\n    __window__.metaco.GetClientBuilder = GetClientBuilder;\r\n    __window__.metaco.MetacoErrors = MetacoErrors.keys;\r\n}(window));","var extensions = {};\r\n\r\nextensions.formatString = function(template) {\r\n    for (var i = 0; i < arguments.length - 1; i++) {\r\n        var regexp = new RegExp('\\\\{'+i+'\\\\}', 'gi');\r\n        template = template.replace(regexp, arguments[i + 1]);\r\n    }\r\n    return template;\r\n};\r\n\r\nmodule.exports = extensions;"]}